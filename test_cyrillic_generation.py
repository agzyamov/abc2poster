#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π DALL-E 3 –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–º–ø—Ç–∏–Ω–≥–∞ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.
"""

import os
import time
import requests
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv
from openai import OpenAI
import pytesseract
from PIL import Image

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class CyrillicGenerationTester:
    def __init__(self):
        self.client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        self.test_dir = Path("cyrillic_test_results")
        self.test_dir.mkdir(exist_ok=True)
        
    def test_prompt_strategy(self, strategy_name: str, prompt: str, test_id: str) -> dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ–º–ø—Ç–∏–Ω–≥–∞"""
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: {strategy_name}")
        print(f"üìù –ü—Ä–æ–º–ø—Ç: {prompt[:100]}...")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            response = self.client.images.generate(
                model="dall-e-3",
                prompt=prompt,
                size="1024x1024",
                quality="standard",
                n=1,
            )
            
            if not response.data or len(response.data) == 0:
                raise Exception("No image data received from OpenAI API")
            
            image_url = response.data[0].url
            if not image_url:
                raise Exception("No image URL received from OpenAI API")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            filename = f"{test_id}_{strategy_name.replace(' ', '_')}.png"
            filepath = self.test_dir / filename
            
            img_response = requests.get(image_url, timeout=30)
            img_response.raise_for_status()
            
            with open(filepath, 'wb') as f:
                f.write(img_response.content)
            
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é OCR
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ OCR
            ocr_result = self.analyze_with_ocr(filepath)
            
            return {
                "strategy": strategy_name,
                "success": True,
                "filepath": str(filepath),
                "ocr_result": ocr_result
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {e}")
            return {
                "strategy": strategy_name,
                "success": False,
                "error": str(e),
                "ocr_result": {"detected_text": [], "success": False}
            }
    
    def analyze_with_ocr(self, filepath: Path) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OCR"""
        try:
            with Image.open(filepath) as img:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OCR
                detected_text_rus = pytesseract.image_to_string(
                    img, lang='rus', config='--psm 6'
                ).strip()
                
                detected_text_eng = pytesseract.image_to_string(
                    img, lang='eng', config='--psm 6'
                ).strip()
                
                detected_text_combined = pytesseract.image_to_string(
                    img, lang='rus+eng', config='--psm 6'
                ).strip()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                detected_lines_rus = [line.strip() for line in detected_text_rus.split('\n') if line.strip()]
                detected_lines_eng = [line.strip() for line in detected_text_eng.split('\n') if line.strip()]
                detected_lines_combined = [line.strip() for line in detected_text_combined.split('\n') if line.strip()]
                
                print(f"üìñ OCR (—Ä—É—Å—Å–∫–∏–π): {detected_lines_rus}")
                print(f"üìñ OCR (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π): {detected_lines_eng}")
                print(f"üìñ OCR (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π): {detected_lines_combined}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                cyrillic_found = any(
                    any(ord(char) >= 0x0400 and ord(char) <= 0x04FF for char in line)
                    for line in detected_lines_combined
                )
                
                return {
                    "detected_text_rus": detected_lines_rus,
                    "detected_text_eng": detected_lines_eng, 
                    "detected_text_combined": detected_lines_combined,
                    "cyrillic_found": cyrillic_found,
                    "success": len(detected_lines_combined) > 0
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ OCR: {e}")
            return {
                "detected_text_rus": [],
                "detected_text_eng": [],
                "detected_text_combined": [],
                "cyrillic_found": False,
                "success": False,
                "error": str(e)
            }
    
    def run_cyrillic_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã DALL-E 3")
        print("=" * 60)
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
        test_cases = [
            {
                "letter": "–ê",
                "word": "–∞—Ä–±—É–∑",
                "description": "–ü—Ä–æ—Å—Ç–∞—è –±—É–∫–≤–∞, –∏–¥–µ–Ω—Ç–∏—á–Ω–∞—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–π A"
            },
            {
                "letter": "–ë", 
                "word": "–±–∞—Ä–∞–±–∞–Ω",
                "description": "–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è –±—É–∫–≤–∞"
            },
            {
                "letter": "–ì",
                "word": "–≥—Ä–∏–±", 
                "description": "–ü—Ä–æ–±–ª–µ–º–Ω–∞—è –±—É–∫–≤–∞ (–∫–∞–∫ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è L)"
            }
        ]
        
        # –†–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–º–ø—Ç–∏–Ω–≥–∞
        strategies = {
            "–±–∞–∑–æ–≤–∞—è": lambda letter, word: f"Russian letter {letter} and word {word}",
            
            "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è": lambda letter, word: f"""
            Create a Russian educational card with letter {letter} and word {word}.
            Use clear, readable Cyrillic text.
            """,
            
            "—Ç–∏–ø–æ–≥—Ä–∞—Ñ—Å–∫–∞—è": lambda letter, word: f"""
            Generate Russian letter {letter} and word {word} using standard typography.
            Use Arial or Times New Roman font style.
            Black text on white background.
            Text must be clearly readable.
            """,
            
            "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è": lambda letter, word: f"""
            Create image with Russian Cyrillic letter {letter} and word {word}.
            CRITICAL: Use only standard Russian typography (–ì–û–°–¢ 2.304-81).
            Letter {letter} must be recognizable by OCR software.
            Word {word} must be readable by Russian text recognition.
            Font: basic sans-serif, black color, high contrast.
            """,
            
            "–≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è": lambda letter, word: self.get_geometric_description(letter, word)
        }
        
        all_results = []
        
        for test_case in test_cases:
            letter = test_case["letter"]
            word = test_case["word"]
            description = test_case["description"]
            
            print(f"\nüéØ –¢–ï–°–¢: {letter}/{word} - {description}")
            print("-" * 40)
            
            test_results = []
            
            for strategy_name, prompt_func in strategies.items():
                prompt = prompt_func(letter, word)
                test_id = f"{letter}_{word}"
                
                result = self.test_prompt_strategy(strategy_name, prompt, test_id)
                test_results.append(result)
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API
                time.sleep(3)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–π –±—É–∫–≤—ã
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–õ–Ø {letter}/{word}:")
            success_count = sum(1 for r in test_results if r.get('ocr_result', {}).get('cyrillic_found', False))
            print(f"–£—Å–ø–µ—à–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã: {success_count}/{len(strategies)}")
            
            all_results.extend(test_results)
            print("\n" + "="*60)
        
        # –û–±—â–∞—è —Å–≤–æ–¥–∫–∞
        self.print_summary(all_results)
        return all_results
    
    def get_geometric_description(self, letter: str, word: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–∫–≤—ã"""
        descriptions = {
            '–ê': 'Triangle shape with horizontal crossbar',
            '–ë': 'Vertical line with horizontal top line and curved bottom',
            '–ì': 'Vertical line with horizontal line at top (upside-down L shape)',
        }
        
        char_desc = descriptions.get(letter, f'Russian letter {letter}')
        
        return f"""
        Generate Russian letter {letter} with exact geometric specification:
        {char_desc}
        
        And Russian word {word} in standard Cyrillic typography.
        
        GEOMETRIC REQUIREMENTS:
        - Letter {letter}: {char_desc}
        - Use basic geometric shapes
        - Black lines on white background
        - Clear, simple design
        - No decorative elements
        """
    
    def print_summary(self, results: list):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\nüéØ –û–ë–©–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 50)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        by_strategy = {}
        for result in results:
            strategy = result['strategy']
            if strategy not in by_strategy:
                by_strategy[strategy] = []
            by_strategy[strategy].append(result)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        for strategy, strategy_results in by_strategy.items():
            success_count = sum(1 for r in strategy_results 
                              if r.get('ocr_result', {}).get('cyrillic_found', False))
            total_count = len(strategy_results)
            success_rate = (success_count / total_count) * 100 if total_count > 0 else 0
            
            print(f"\nüìà {strategy.upper()}:")
            print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_count}/{total_count} ({success_rate:.1f}%)")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            for r in strategy_results:
                if r.get('ocr_result', {}).get('cyrillic_found', False):
                    detected = r['ocr_result']['detected_text_combined']
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞: {detected}")
                    break
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        best_strategy = max(by_strategy.items(), 
                           key=lambda x: sum(1 for r in x[1] 
                                           if r.get('ocr_result', {}).get('cyrillic_found', False)))
        
        print(f"   –õ—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {best_strategy[0]}")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {'DALL-E 3 —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π' if best_strategy else '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ'}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üá∑üá∫ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–ò–†–ò–õ–õ–ò–¶–´ DALL-E 3")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
    print()
    
    if not os.getenv('OPENAI_API_KEY'):
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ .env")
        return
    
    tester = CyrillicGenerationTester()
    results = tester.run_cyrillic_tests()
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {tester.test_dir}")
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏")


if __name__ == "__main__":
    main() 